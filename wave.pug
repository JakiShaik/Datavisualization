extends layout

block resource
	link(rel='stylesheet', href='/stylesheets/visual.css') 
	script(src='https://d3js.org/d3.v4.min.js')

block content
	.container
		h2.display-6 Please select a tag
		br
		select(onchange='refresh()')
			- tags.forEach(function(tag) {
				option(value=tag.ID) #{tag.TXT}
			- })
		br
		br
		svg(width='960' height='500')
	
	script.
		var svg = d3.select('svg');
		margin = {top: 20, right: 20, bottom: 30, left: 50};
		width = +svg.attr('width') - margin.left - margin.right;
		height = +svg.attr('height') - margin.top - margin.bottom;

		var x = d3.scaleTime().rangeRound([0, width]);
		var y = d3.scaleLinear().rangeRound([height, 0]);

		var parseTime = d3.timeParse("%Y-%m-%d");
		var formatTime = d3.timeFormat("%e %B");
		var div = d3.select('container').append('div')
					.attr("class", "tooltip")
					.style("opacity", 0);

		var line = d3.line()
			.curve(d3.curveLinear)
			.x((d)=>{ return x(d.ONDATE); })
			.y((d)=>{ return y(d.FITBITSTEPS); });

		refresh();

		function refresh() {
			svg.selectAll('*').remove();
			var selectId = $('select').val();
			if (selectId) {
				$.post('show', { tagId: selectId }).done(function (data) {
					if (data.err) {
						alert('Fail to get data');
						return;
					}
					data = data.data;
					if (data.length == 0) {
						alert('No data available for this tag');
						return;
					}
					data.forEach(function(d){
						d.ONDATE = parseTime(d.ONDATE);
						d.FITBITSTEPS = +d.FITBITSTEPS;
					})
					var g = svg.append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
					//data = data.map((d) => { return { ONDATE: parseTime(d.ONDATE), FITBITSTEPS: d.FITBITSTEPS }; });
					x.domain(d3.extent(data, (d) => { return d.ONDATE; }));
					y.domain([0, d3.max(data, (d) => { return d.FITBITSTEPS; })]);

					g.append('path')
							.style("fill","none")
							.style("stroke","orange")
							.data([data])
							.attr('class', 'line-content')
							.attr('d', line);

					var xAxis = d3.axisBottom(x);
					xAxis.tickFormat(d3.timeFormat('%m/%d'));
					g.append('g')
							.call(xAxis)
							.attr('transform', 'translate(0,' + height + ')')
					g.append('text')
						.attr('x', width-6)
						.attr("y",  height+margin.top)
						.attr('dx', '0.71em')
						.attr('text-anchor', 'end')
						.text('Date');

					g.append('g')
							.call(d3.axisLeft(y))
						.append('text')
							.attr('fill', '#000')
							.attr('transform', 'rotate(-90)')
							.attr('y', 6)
							.attr('dy', '0.71em')
							.style("font-size","15px")
							.attr('text-anchor', 'end')
							.text('Steps');

					/*g.selectAll('circle')
							.data(data)
							.enter().append('circle')
							.attr('cx', (d) => { return x(d.ONDATE); })
							.attr('cy', (d) => { return y(d.FITBITSTEPS); })
							.attr('r', 5)
							.attr('class', 'data-point')*/;
					g.selectAll("dot")
						.data(data)
						.enter().append("circle")
						.attr("r", 4)
						.style("stroke","orange")
						.style("fill","orange")
						.attr("cx", function(d) { return x(d.ONDATE); })
						.attr("cy", function(d) { return y(d.FITBITSTEPS); })
						.on("mouseover", function(d) {
							console.log(d)
							div.transition()
								.duration(200)
								.style("opacity", .9);
							div.html(formatTime(d.ONDATE) + "<br/>" + d.FITBITSTEPS)
								.style("left", (d3.event.pageX) + "px")
								.style("top", (d3.event.pageY - 28) + "px");
							})
						.on("mouseout", function(d) {
							div.transition()
								.duration(500)
								.style("opacity", 0);
							});

					/*svg.append('g')
						.attr('class', 'grid')
						.attr('transform', 'translate(' + margin.left + ',' + (height + margin.top) + ')')
						.call(d3.axisBottom(x)
								.ticks(5)
								.tickSize(-height, 0, 0)
								.tickFormat('')
						);*/

					svg.append('g')
						.attr('class', 'grid')
						.attr('transform','translate(' + margin.left + ',' + margin.top + ')')
						.call(d3.axisLeft(y)
								.ticks(5)
								.tickSize(-width, 0, 0)
								.tickFormat('')
						);
				});
			}
		};
